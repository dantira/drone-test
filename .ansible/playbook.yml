---

- name: Create droplet in do
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    digital_ocean_token: "{{ digital_ocean_token }}"
    droplet_size: s-1vcpu-1gb
    droplet_region: fra1
    droplet_image: ubuntu-22-10-x64

  tasks:

    - name: "Add public ssh key to digitalocean account"
      digital_ocean_sshkey:
        name: "dan"
        oauth_token: "{{ digital_ocean_token }}"
        ssh_pub_key: "{{ lookup('env', 'DO_PUBLIC_KEY') }}"
        state: present
      register: sshkey_result

    - name: create a new droplet assigning the key
      digital_ocean_droplet:
        name: "{{ item }}"
        oauth_token: "{{ digital_ocean_token }}"
        size: "{{ droplet_size }}"
        region: "{{ droplet_region }}"
        image: "{{ droplet_image }}"
        wait_timeout: 600
        unique_name: yes
        ssh_keys: ["{{ sshkey_result.data.ssh_key.id }}"]
        state: present
      with_items:
        - test.vm
      register: droplet_result


    - name: Add new droplet to host group
      local_action: add_host hostname={{ item.data.ip_address }} groupname=launched ansible_ssh_common_args='-o StrictHostKeyChecking=no'
      with_items: "{{ droplet_result.results  }}"

    - name: Wait for SSH to come up
      local_action: wait_for
        host={{ item.data.ip_address }}
        port=22
        state=started
      with_items: "{{ droplet_result.results }}"

- hosts: launched
  vars:
    instance: "{{ lookup('env', 'DRONE_DEPLOY_TO') }}"
    docker_id: "tbpeople_{{ instance }}"
    docker_network: "drone_deployments"
    portainer_team: "tbpeople_{{ instance }}"
    database_password: "qBw2bTs69uHVf2fQ"
    database_name: "web"
  tasks:
  - name: "apt-get update"
    apt:
      update_cache: yes
      cache_valid_time: 3600

  - name: Install aptitude
    apt:
      name: aptitude
      state: latest
      update_cache: true

  - name: Install required system packages
    apt:
      pkg:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - python3-pip
        - virtualenv
        - python3-setuptools
      state: latest
      update_cache: true

  - name: Add Docker GPG apt Key
    apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

  - name: Add Docker Repository
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu focal stable
      state: present

  - name: Update apt and install docker-ce
    apt:
      name: docker-ce
      state: latest
      update_cache: true

  - name: Install Docker Module for Python
    pip:
      name: docker
  - name: Log into Docker Registry
    community.general.docker_login:
          registry: registry.digitalocean.com
          username: "{{ digital_ocean_token }}"
          password: "{{ digital_ocean_token }}"
  - name: Create network
    community.general.docker_network:
     name: "{{ docker_network }}"
  - name: Create database volume
    community.general.docker_volume:
      name: "{{ docker_id }}_db"
  - name: Create app storage volume
    community.general.docker_volume:
      name: "{{ docker_id }}_app_storage"
  - name: Create framework storage volume
    community.general.docker_volume:
      name: "{{ docker_id }}_framework_storage"
  - name: Create logs storage volume
    community.general.docker_volume:
      name: "{{ docker_id }}_logs_storage"
  - name: Start database
    community.general.docker_container:
      name: "{{ docker_id }}_db"
      image: "mariadb:10.7.5"
      state: started
      restart_policy: unless-stopped
      volumes:
        - "{{ docker_id }}_db:/var/lib/mysql"
      networks:
        - name: "{{ docker_network }}"
      env:
        MYSQL_ROOT_PASSWORD: "{{ database_password }}"
        MYSQL_DATABASE: "{{ database_name }}"
