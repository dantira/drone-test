---
- hosts: earth
  vars:
    instance: "{{ lookup('env', 'DRONE_DEPLOY_TO') }}"
    docker_id: "tbpeople_{{ instance }}"
    docker_network: "drone_deployments"
    portainer_team: "tbpeople_{{ instance }}"
    database_password: "qBw2bTs69uHVf2fQ"
    database_name: "web"
  tasks:
  - name: "apt-get update"
    apt:
      update_cache: yes
      cache_valid_time: 3600

  - name: Install aptitude
    apt:
      name: aptitude
      state: latest
      update_cache: true

  - name: Install required system packages- apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - python3-pip
        - virt

    apt:
      pkg:
        - apt-transport-https
        - ca-certificates
        - curl- apt-transport-https
        - ca-certificates
        - curl- apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - python3-pip
        - virt

        - software-properties-common
        - python3-pip
        - virt

        - software-properties-common
        - python3-pip
        - virtualenv
        - python3-setuptools
      state: latest
      update_cache: true

  - name: Add Docker GPG apt Key
    apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

  - name: Add Docker Repository
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu focal stable
      state: present

  - name: Update apt and install docker-ce
    apt:
      name: docker-ce
      state: latest
      update_cache: true

  - name: Install Docker Module for Python
    pip:
      name: docker
  - name: Log into Docker Registry
    community.general.docker_login:
          registry: registry.digitalocean.com
          username: "{{ digital_ocean_token }}"
          password: "{{ digital_ocean_token }}"
  - name: Create network
    community.general.docker_network:
     name: "{{ docker_network }}"
  - name: Create database volume
    community.general.docker_volume:
      name: "{{ docker_id }}_db"
  - name: Create app storage volume
    community.general.docker_volume:
      name: "{{ docker_id }}_app_storage"
  - name: Create framework storage volume
    community.general.docker_volume:
      name: "{{ docker_id }}_framework_storage"
  - name: Create logs storage volume
    community.general.docker_volume:
      name: "{{ docker_id }}_logs_storage"
  - name: Start database
    community.general.docker_container:
      name: "{{ docker_id }}_db"
      image: "mariadb:10.7.5"
      state: started
      restart_policy: unless-stopped
      volumes:
        - "{{ docker_id }}_db:/var/lib/mysql"
      networks:
        - name: "{{ docker_network }}"
      env:
        MYSQL_ROOT_PASSWORD: "{{ database_password }}"
        MYSQL_DATABASE: "{{ database_name }}"
